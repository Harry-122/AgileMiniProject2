package com.project {
	pomXml {
        groupId = "com.project"
        artifactId = "springboot-application"
        version = "1.0.0"
        packaging = "jar"

        properties {
            javaVersion = "1.8"
            springBootVersion = "2.7.5"
        }

        dependencies {
	        dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-web"
	            version = "2.5.6"
	            scope = "compile"
	        }
	        
	        dependency {
	            groupId = "org.projectlombok"
	            artifactId = "lombok"
	            version = "1.18.32"
	            scope = "compile"            
	        }
	        
            dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-data-jpa"
	            version = "2.5.6"
	            scope = "compile"
        	}
        
	        dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-validation"
	            version = "2.5.6"
	            scope = "compile"
	        }
	        
	        dependency {
	            groupId = "io.github.rieske.dbtest"
	            artifactId = "h2"
	            version = "0.0.5"
	            scope = "runtime"
	        }
	        
	        dependency {
	            groupId = "com.fasterxml.jackson.core"
	            artifactId = "jackson-annotations"
	            version = "2.15.1"
	        }
	        
	        dependency {
	            groupId = "org.hibernate"
	            artifactId = "hibernate-core"
	            version = "5.4.32.Final"
	        }
	        
	        dependency {
	            groupId = "org.modelmapper"
	            artifactId = "modelmapper"
	            version = "3.1.1"
	        }
	        
	        dependency {
	            groupId = "com.fasterxml.jackson.core"
	            artifactId = "jackson-databind"
	            version = "2.13.4.2"
	        }
	        
	        dependency {
	            groupId = "javax.xml.bind"
	            artifactId = "jaxb-api"
	            version = "2.3.1"
	        }
	        
	        dependency {
	            groupId = "jakarta.persistence"
	            artifactId = "jakarta.persistence-api"
	            version = "2.2.3"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-swagger2"
	            version = "3.0.0"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-boot-starter"
	            version = "3.0.0"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-swagger-ui"
	            version = "3.0.0"
	        }
        }
        
        build {
            plugins {
                plugin {
                    groupId = "org.apache.maven.plugins"
                    artifactId = "maven-compiler-plugin"
                    version = "3.8.1"
                    configuration {
                        source = "${java.version}"
                        target = "${java.version}"
                    }
                }
            }
        }
    }
    
    package dto {
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class UsersDto {
       
            private id: UUID
           
            private emailId: String
           
            private username: String
           
            private password: String
           
            private dob: Date
           
            private createdAt: Timestamp
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class PostDto {
       		private id: UUID
       		
       		private tweetId: String
       		
       		private userId: String
       		
       		private posts: List<PostCommentDto>
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class PostCommentDto {
       		private id: UUID
       		
       		private post: String
        }
    }
    
    package entity {
    	@Entity
	    @Table(name="tweets")
	    class TweetEntity {
	        @Id
	        private id: UUID
	
	        @ManyToOne
	        @JoinColumn(name="user_id")
	        private user: UsersEntity
	    }
	    
	    @Entity
	    @Table(name="users")
	    class UsersEntity {
	        @Id
	        private id: UUID
	
	        @Column(name="email_id")
	        private emailId: String
	        
	        @Column(name="username")
	        private username: String
	        
	        @Column(name="password")
	        private password: String
	        
	        @Column(name="dob")
	        private dob: Date
	        
	        @Column(name="created_at")
	        private createdAt: Timestamp
	        
	        @OneToMany(mappedBy="user")
	        private orders: List<TweetEntity>
	    }
	    
	    @Entity
	    @Table(name="post_comment")
	    class PostCommentEntity {
	        @Id
	        private id: UUID
	
	        @Column(name="comment")
	        private comment: String
	        
	        @JoinColumn(name="tweet_id")
	         private tweet: TweetEntity
	         
	         @JoinColumn(name="post_id")
	         private post: PostEntity

	    }
	    
	    @Entity
	    @Table(name="post")
	    class PostEntity {
	        @Id
	        private id: UUID
	
	        @ManyToOne
	        @JoinColumn(name="user_id")
	        private user: UsersEntity
	        
	        @JoinColumn(name="tweet_id")
	         private tweet: TweetEntity
	         	         
	         @OneToMany(mappedBy="post")
	        private postComments: List<PostCommentEntity>
	    }
	}
	
	package serviceInterface {
    	interface IUsersService {
           
            public createUsers(userDto: UsersDto): void
           
            public updateUser(userId: UUID, userDto: UsersDto): void
           
            public deleteUser(userId: UUID): void
           
            public getAllUsers(): List<UsersDto>
           
            public getUserByUsername(username: String): UsersDto
           
        }
        
        interface IPostService {
           public getAllPostById(tweetId: String): List<PostDto>
        }
    }
    
    package repository {
        @Repository
        interface UsersRepository extends <UsersEntity, UUID> {
        	public findByUsername(username: String): Optional<UsersEntity>
        	public findAllUsers(): List<UsersEntity>
        }
        
        @Repository
        interface PostRepository extends <PostEntity, UUID> {
        	public getAllPostById(tweetId: String): List<PostDto>
        }
    }
    
    package service {
        @Service
        class UsersService implements IUsersService {
           
            @Override
            public createUsers(userDto: UsersDto): void
           
            @Override
            public updateUser(userId: UUID, userDto: UsersDto): void
           
            @Override
            public deleteUser(userId: UUID): void
           
            @Override
            public getAllUsers(): List<UsersDto>
           
            @Override
            public getUserByUsername(username: String): UsersDto
        }
        
        @Service
        class PostService implements IPostService {
        
           @Override
            public getAllPostById(tweetId: String): List<PostDto>
        }
       
    }
  
	package controller {
        @RestController
		@RequestMapping(path = "/api")
        class UsersController {
            @Autowired
            private iUsersService: IUsersService

            @RequestMapping(method = "POST")
            public createUsers(userDto: UsersDto): void

            @RequestMapping(method = "PUT")
            public updateUser(userId: UUID, userDto: UsersDto): void
            
            @RequestMapping(method = "PUT")
            public updateUserName(userId: UUID, name: String): void

            @RequestMapping(method = "DELETE")
            public deleteUser(userId: UUID): void

            @RequestMapping(method = "GET")
            public getAllUsers(): List<UsersDto>

            @RequestMapping(method = "GET")
            public getUserByUsername(username: String): UsersDto
        }
        
        @RestController
		@RequestMapping(path = "/api/post")
        class PostController {
            @Autowired
            private postService: IPostService

            @RequestMapping(method = "GET")
            public getAllPostById(tweetId: String): List<PostDto>
        }
    }
}
