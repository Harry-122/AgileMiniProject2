package com.project {
	pomXml {
        groupId = "com.project"
        artifactId = "springboot-application"
        version = "1.0.0"
        packaging = "jar"

        properties {
            javaVersion = "1.8"
            springBootVersion = "2.7.5"
        }

        dependencies {
	        dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-web"
	            version = "2.5.6"
	            scope = "compile"
	        }
	        
	        dependency {
	            groupId = "org.projectlombok"
	            artifactId = "lombok"
	            version = "1.18.32"
	            scope = "compile"            
	        }
	        
            dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-data-jpa"
	            version = "2.5.6"
	            scope = "compile"
        	}
        
	        dependency {
	            groupId = "org.springframework.boot"
	            artifactId = "spring-boot-starter-validation"
	            version = "2.5.6"
	            scope = "compile"
	        }
	        
	        dependency {
	            groupId = "io.github.rieske.dbtest"
	            artifactId = "h2"
	            version = "0.0.5"
	            scope = "runtime"
	        }
	        
	        dependency {
	            groupId = "com.fasterxml.jackson.core"
	            artifactId = "jackson-annotations"
	            version = "2.15.1"
	        }
	        
	        dependency {
	            groupId = "org.hibernate"
	            artifactId = "hibernate-core"
	            version = "5.4.32.Final"
	        }
	        
	        dependency {
	            groupId = "org.modelmapper"
	            artifactId = "modelmapper"
	            version = "3.1.1"
	        }
	        
	        dependency {
	            groupId = "com.fasterxml.jackson.core"
	            artifactId = "jackson-databind"
	            version = "2.13.4.2"
	        }
	        
	        dependency {
	            groupId = "javax.xml.bind"
	            artifactId = "jaxb-api"
	            version = "2.3.1"
	        }
	        
	        dependency {
	            groupId = "jakarta.persistence"
	            artifactId = "jakarta.persistence-api"
	            version = "2.2.3"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-swagger2"
	            version = "3.0.0"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-boot-starter"
	            version = "3.0.0"
	        }
	        
	        dependency {
	            groupId = "io.springfox"
	            artifactId = "springfox-swagger-ui"
	            version = "3.0.0"
	        }
        }
        
        build {
            plugins {
                plugin {
                    groupId = "org.apache.maven.plugins"
                    artifactId = "maven-compiler-plugin"
                    version = "3.8.1"
                    configuration {
                        source = "${java.version}"
                        target = "${java.version}"
                    }
                }
            }
        }
    }
    
    package dto {
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class UsersDto {
       
            private id: UUID
           
            private emailId: String
           
            private username: String
           
            private password: String
           
            private dob: Date
           
            private createdAt: Timestamp
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class TweetsDto {
       		private id: UUID
       		
       		private tweetId: String
       		
       		private userId: String
       		
       		private posts: List<TweetsCommentDto>
       		
       		private createdAt: Timestamp
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class TweetsCommentDto {
       		private id: UUID
       		
       		private post: String
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class FeedsTweetDto {
        	private id: UUID
       		
       		private userId: String
       		
       		private posts: List<TweetsCommentDto>
       		
       		private createdAt: Timestamp
        }
        
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class MessageDto {
        	private responseStatusCode: HttpStatus
        	
        	private responseMessage: String
        }
    }
    
    package serviceInterface {
    	interface IUsersService {
           
            public createUsers(userDto: UsersDto): void
           
            public updateUser(userId: UUID, userDto: UsersDto): void
           
            public deleteUser(userId: UUID): void
           
            public getAllUsers(): List<UsersDto>
           
            public getUserByUsername(username: String): UsersDto
           
        }
        
        interface INewfeedsService {
        	public createNewsFeeds(feedsTweetDto: FeedsTweetDto): void
           
            public updateNewsFeeds(feedId: UUID, feedsTweetDto: FeedsTweetDto): void
           
            public deleteNewFeed(feedId: UUID): void
           
            public getAllTweets(): List<FeedsTweetDto>
           
            public getNewsFeedById(userId: UUID): FeedsTweetDto
        }
        
        interface ITweetService {
           public createTweet(tweetsDto: TweetsDto): void
           
           public updateTweet(tweetId: UUID, tweetsDto: TweetsDto): void
           
           public deleteTweetById(tweedId: UUID): void
           
           public getAllTweets(): List<TweetsDto>
           
           public getTweetById(tweetId: UUID): TweetsDto
        }
    }
    
    package controller {
        @RestController
		@RequestMapping(path = "/api/users")
        class UsersController {
        
            @Autowired
            private iUsersService: IUsersService

            @RequestMapping(method = "POST")
            public createUsers(userDto: UsersDto): ResponseEntity<MessageDto>

            @RequestMapping(method = "PUT")
            public updateUser(userId: UUID, userDto: UsersDto): ResponseEntity<MessageDto>
            
            @RequestMapping(method = "PUT")
            public updateUserName(userId: UUID, name: String): ResponseEntity<MessageDto>

            @RequestMapping(method = "DELETE")
            public deleteUser(userId: UUID): void

            @RequestMapping(method = "GET")
            public getAllUsers(): List<UsersDto>

            @RequestMapping(method = "GET")
            public getUserByUsername(username: String): UsersDto
        }
        
        @RestController
        @RequestMapping(path = "/api/feeds")
        class NewfeedsController {
        
            @Autowired
            private iNewfeedsService: INewfeedsService

            @RequestMapping(method = "POST")
            public createNewsFeeds(feedsTweetDto: FeedsTweetDto): ResponseEntity<MessageDto>

            @RequestMapping(method = "PUT")
            public updateNewsFeeds(userId: UUID, feedsTweetDto: FeedsTweetDto): ResponseEntity<MessageDto>
            
            @RequestMapping(method = "DELETE")
            public deleteNewFeed(userId: UUID, name: String): ResponseEntity<MessageDto>

            @RequestMapping(method = "GET")
            public getAllTweets(): List<FeedsTweetDto>

            @RequestMapping(method = "GET")
            public getNewsFeedById(userId: UUID): FeedsTweetDto
        }
        
        @RestController
        @RequestMapping(path = "/api/tweets")
        class TweetController {
        
            @Autowired
            private iNewfeedsService: INewfeedsService

            @RequestMapping(method = "POST")
            public createTweet(tweetsDto: TweetsDto): ResponseEntity<MessageDto>

            @RequestMapping(method = "PUT")
            public updateTweet(userId: UUID, tweetsDto: TweetsDto): ResponseEntity<MessageDto>
            
            @RequestMapping(method = "DELETE")
            public deleteTweetById(tweedId: UUID): ResponseEntity<MessageDto>

            @RequestMapping(method = "GET")
            public getAllTweets(): List<TweetsDto>

            @RequestMapping(method = "GET")
            public getTweetById(tweetId: UUID): TweetsDto
        }
    }
}
