package com.project {
	pomXml {
        groupId = "com.project"
        artifactId = "springboot-application"
        version = "1.0.0"
        packaging = "jar"

        properties {
            javaVersion = "1.8"
            springBootVersion = "2.7.5"
        }

        dependencies {
            dependency {
                groupId = "org.springframework.boot"
                artifactId = "spring-boot-starter-web"
                version = "2.7.5"
                scope = "compile"
            }
            dependency {
                groupId = "org.springframework.boot"
                artifactId = "spring-boot-starter-data-jpa"
                version = "2.7.5"
                scope = "compile"
            }
            dependency {
                groupId = "org.springframework.boot"
                artifactId = "spring-boot-starter-test"
                version = "2.7.5"
                scope = "test"
            }
        }
        
        build {
            plugins {
                plugin {
                    groupId = "org.apache.maven.plugins"
                    artifactId = "maven-compiler-plugin"
                    version = "3.8.1"
                    configuration {
                        source = "${java.version}"
                        target = "${java.version}"
                    }
                }
            }
        }
    }
    
    springBootApplication {
        name = "SpringBootApplication"
        packageName = "com.project"
        annotations = ["@SpringBootApplication"]
    }
    
    package controller {
        @RestController(path="\\api")
        class UsersController {
            @Autowired
            private iUsersService: IUsersService

            @RequestMapping(method = "POST")
            public createUsers(userDto: dto.UsersDto): void

            @RequestMapping(method = "PUT")
            public updateUser(userId: UUID, userDto: UsersDto): void

            @RequestMapping(method = "DELETE")
            public deleteUser(userId: UUID): void

            @RequestMapping(method = "GET")
            public getAllUsers(): List<UsersDto>

            @RequestMapping(method = "GET")
            public getUserByUsername(username: String): UsersDto
        }
    }
	
    package service {
        @Service
        class UsersService implements IUsersInterface {
           
            @Override
            public createUsers(userDto: UsersDto): void
           
            @Override
            public updateUser(userId: UUID, userDto: UsersDto): void
           
            @Override
            public deleteUser(userId: UUID): void
           
            @Override
            public getAllUsers(): List<UsersDto>
           
            @Override
            public getUserByUsername(username: String): UsersDto
        }
       
    }
    
    package serviceInterface {
    	@Interface
    	interface IUsersService {
           
            public createUsers(userDto: UsersDto): void
           
            public updateUser(userId: UUID, userDto: UsersDto): void
           
            public deleteUser(userId: UUID): void
           
            public getAllUsers(): List<UsersDto>
           
            public getUserByUsername(username: String): UsersDto
           
        }
    
    }
   
    package dto {
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        class UsersDto {
       
            private id: UUID
           
            private emailId: String
           
            private username: String
           
            private password: String
           
            private dob: Date
           
            private createdAt: Timestamp
        }
    }
    
    package repository {
        @Repository
        interface UsersRepository extends <UsersEntity, UUID> {
        	public findByUsername(username: String): Optional<UsersEntity>
        	public findAllUsers(): List<UsersEntity>
        }
        
        @Repository
        interface TweetsRepository extends <TweetEntity, UUID> {
            public findByUserId(userId: UUID): List<TweetEntity>
        }
    }
    
    package entity {
    	@Entity
        @Table(name="tweets")
        class TweetEntity {
            @Id
            @GeneratedValue(strategy="UUID")
            private id: UUID

            @ManyToOne
            @JoinColumn(name="user_id", nullable=false)
            private user: UsersEntity
        }
        
        @Entity
        @Table(name="users")
        class UsersEntity {
            @Id
            @GeneratedValue(strategy="UUID")
            private id: UUID

            @Column(name="email_id")
            private emailId: String
            
            @Column(name="username")
            private username: String
            
            @Column(name="password")
            private password: String
            
            @Column(name="dob")
            private dob: Date
            
            @Column(name="created_at")
            private createdAt: Timestamp

            @OneToMany(mappedBy="user", cascade=CascadeType.ALL, orphanRemoval=true)
            private orders: List<OrderEntity>
        }
    }
}
