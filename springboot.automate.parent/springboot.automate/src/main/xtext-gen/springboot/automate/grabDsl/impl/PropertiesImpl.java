/**
 * generated by Xtext 2.32.0
 */
package springboot.automate.grabDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import springboot.automate.grabDsl.GrabDslPackage;
import springboot.automate.grabDsl.Properties;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Properties</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link springboot.automate.grabDsl.impl.PropertiesImpl#getJavaVersion <em>Java Version</em>}</li>
 *   <li>{@link springboot.automate.grabDsl.impl.PropertiesImpl#getSpringBootVersion <em>Spring Boot Version</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertiesImpl extends MinimalEObjectImpl.Container implements Properties
{
  /**
   * The default value of the '{@link #getJavaVersion() <em>Java Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaVersion()
   * @generated
   * @ordered
   */
  protected static final String JAVA_VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJavaVersion() <em>Java Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaVersion()
   * @generated
   * @ordered
   */
  protected String javaVersion = JAVA_VERSION_EDEFAULT;

  /**
   * The default value of the '{@link #getSpringBootVersion() <em>Spring Boot Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpringBootVersion()
   * @generated
   * @ordered
   */
  protected static final String SPRING_BOOT_VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpringBootVersion() <em>Spring Boot Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpringBootVersion()
   * @generated
   * @ordered
   */
  protected String springBootVersion = SPRING_BOOT_VERSION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GrabDslPackage.Literals.PROPERTIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getJavaVersion()
  {
    return javaVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJavaVersion(String newJavaVersion)
  {
    String oldJavaVersion = javaVersion;
    javaVersion = newJavaVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GrabDslPackage.PROPERTIES__JAVA_VERSION, oldJavaVersion, javaVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSpringBootVersion()
  {
    return springBootVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpringBootVersion(String newSpringBootVersion)
  {
    String oldSpringBootVersion = springBootVersion;
    springBootVersion = newSpringBootVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GrabDslPackage.PROPERTIES__SPRING_BOOT_VERSION, oldSpringBootVersion, springBootVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GrabDslPackage.PROPERTIES__JAVA_VERSION:
        return getJavaVersion();
      case GrabDslPackage.PROPERTIES__SPRING_BOOT_VERSION:
        return getSpringBootVersion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GrabDslPackage.PROPERTIES__JAVA_VERSION:
        setJavaVersion((String)newValue);
        return;
      case GrabDslPackage.PROPERTIES__SPRING_BOOT_VERSION:
        setSpringBootVersion((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GrabDslPackage.PROPERTIES__JAVA_VERSION:
        setJavaVersion(JAVA_VERSION_EDEFAULT);
        return;
      case GrabDslPackage.PROPERTIES__SPRING_BOOT_VERSION:
        setSpringBootVersion(SPRING_BOOT_VERSION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GrabDslPackage.PROPERTIES__JAVA_VERSION:
        return JAVA_VERSION_EDEFAULT == null ? javaVersion != null : !JAVA_VERSION_EDEFAULT.equals(javaVersion);
      case GrabDslPackage.PROPERTIES__SPRING_BOOT_VERSION:
        return SPRING_BOOT_VERSION_EDEFAULT == null ? springBootVersion != null : !SPRING_BOOT_VERSION_EDEFAULT.equals(springBootVersion);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (javaVersion: ");
    result.append(javaVersion);
    result.append(", springBootVersion: ");
    result.append(springBootVersion);
    result.append(')');
    return result.toString();
  }

} //PropertiesImpl
