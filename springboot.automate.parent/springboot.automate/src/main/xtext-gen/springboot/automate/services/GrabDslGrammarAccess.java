/*
 * generated by Xtext 2.32.0
 */
package springboot.automate.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GrabDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPomXmlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPomXmlPomXmlParserRuleCall_3_0 = (RuleCall)cPomXmlAssignment_3.eContents().get(0);
		private final Assignment cPackagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackagesPackageDefinitionParserRuleCall_4_0 = (RuleCall)cPackagesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Entry point for the grammar
		//Model:
		//    'package' packageName=QualifiedName '{'
		//        pomXml=PomXml
		//        packages+=PackageDefinition*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' packageName=QualifiedName '{'
		//    pomXml=PomXml
		//    packages+=PackageDefinition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//pomXml=PomXml
		public Assignment getPomXmlAssignment_3() { return cPomXmlAssignment_3; }
		
		//PomXml
		public RuleCall getPomXmlPomXmlParserRuleCall_3_0() { return cPomXmlPomXmlParserRuleCall_3_0; }
		
		//packages+=PackageDefinition*
		public Assignment getPackagesAssignment_4() { return cPackagesAssignment_4; }
		
		//PackageDefinition
		public RuleCall getPackagesPackageDefinitionParserRuleCall_4_0() { return cPackagesPackageDefinitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPackageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cPackageNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassesClassDefinitionParserRuleCall_4_0 = (RuleCall)cClassesAssignment_4.eContents().get(0);
		private final Assignment cInterfacesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInterfacesInterfaceDefinitionParserRuleCall_5_0 = (RuleCall)cInterfacesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PackageDefinition:
		//    annotations+=Annotation*
		//    'package' packageName=QualifiedName '{'
		//        classes+=ClassDefinition*
		//        interfaces+=InterfaceDefinition*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'package' packageName=QualifiedName '{'
		//    classes+=ClassDefinition*
		//    interfaces+=InterfaceDefinition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_2() { return cPackageNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_2_0() { return cPackageNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//classes+=ClassDefinition*
		public Assignment getClassesAssignment_4() { return cClassesAssignment_4; }
		
		//ClassDefinition
		public RuleCall getClassesClassDefinitionParserRuleCall_4_0() { return cClassesClassDefinitionParserRuleCall_4_0; }
		
		//interfaces+=InterfaceDefinition*
		public Assignment getInterfacesAssignment_5() { return cInterfacesAssignment_5; }
		
		//InterfaceDefinition
		public RuleCall getInterfacesInterfaceDefinitionParserRuleCall_5_0() { return cInterfacesInterfaceDefinitionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceQualifiedNameParserRuleCall_3_1_0 = (RuleCall)cInterfaceAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberDefinitionParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClassDefinition:
		//    annotations+=Annotation*
		//    'class' name=ID
		//    ('implements' interface=QualifiedName)? // Implementing an interface
		//    '{'
		//        members+=MemberDefinition*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'class' name=ID
		//('implements' interface=QualifiedName)? // Implementing an interface
		//'{'
		//    members+=MemberDefinition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('implements' interface=QualifiedName)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'implements'
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }
		
		//interface=QualifiedName
		public Assignment getInterfaceAssignment_3_1() { return cInterfaceAssignment_3_1; }
		
		//QualifiedName
		public RuleCall getInterfaceQualifiedNameParserRuleCall_3_1_0() { return cInterfaceQualifiedNameParserRuleCall_3_1_0; }
		
		//// Implementing an interface
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=MemberDefinition*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//MemberDefinition
		public RuleCall getMembersMemberDefinitionParserRuleCall_5_0() { return cMembersMemberDefinitionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceEntityTypeParserRuleCall_3_1_0 = (RuleCall)cInterfaceAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberDefinitionParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InterfaceDefinition:
		//    annotations+=Annotation*
		//    'interface' name=ID
		//    ('extends' interface=EntityType)? // Implementing an interface
		//    '{'
		//        members+=MemberDefinition*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'interface' name=ID
		//('extends' interface=EntityType)? // Implementing an interface
		//'{'
		//    members+=MemberDefinition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' interface=EntityType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//interface=EntityType
		public Assignment getInterfaceAssignment_3_1() { return cInterfaceAssignment_3_1; }
		
		//EntityType
		public RuleCall getInterfaceEntityTypeParserRuleCall_3_1_0() { return cInterfaceEntityTypeParserRuleCall_3_1_0; }
		
		//// Implementing an interface
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=MemberDefinition*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//MemberDefinition
		public RuleCall getMembersMemberDefinitionParserRuleCall_5_0() { return cMembersMemberDefinitionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.MemberDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMethodMethodDefinitionParserRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyPropertyDefinitionParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		
		//MemberDefinition:
		//    (method=MethodDefinition | property=PropertyDefinition);
		@Override public ParserRule getRule() { return rule; }
		
		//(method=MethodDefinition | property=PropertyDefinition)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//method=MethodDefinition
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//MethodDefinition
		public RuleCall getMethodMethodDefinitionParserRuleCall_0_0() { return cMethodMethodDefinitionParserRuleCall_0_0; }
		
		//property=PropertyDefinition
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//PropertyDefinition
		public RuleCall getPropertyPropertyDefinitionParserRuleCall_1_0() { return cPropertyPropertyDefinitionParserRuleCall_1_0; }
	}
	public class MethodDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.MethodDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterDefinitionParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterDefinitionParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReturnTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReturnTypeTypeParserRuleCall_7_0 = (RuleCall)cReturnTypeAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MethodDefinition:
		//    annotations+=Annotation*
		//    visibility=VisibilityModifier? // Optional visibility
		//    name=ID '('
		//        (parameters+=ParameterDefinition (',' parameters+=ParameterDefinition)*)? // Parameter list
		//    ')'
		//    ':' returnType=Type ';';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//visibility=VisibilityModifier? // Optional visibility
		//name=ID '('
		//    (parameters+=ParameterDefinition (',' parameters+=ParameterDefinition)*)? // Parameter list
		//')'
		//':' returnType=Type ';'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_1_0() { return cVisibilityVisibilityModifierParserRuleCall_1_0; }
		
		//// Optional visibility
		//   name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=ParameterDefinition (',' parameters+=ParameterDefinition)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=ParameterDefinition
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//ParameterDefinition
		public RuleCall getParametersParameterDefinitionParserRuleCall_4_0_0() { return cParametersParameterDefinitionParserRuleCall_4_0_0; }
		
		//(',' parameters+=ParameterDefinition)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=ParameterDefinition
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//ParameterDefinition
		public RuleCall getParametersParameterDefinitionParserRuleCall_4_1_1_0() { return cParametersParameterDefinitionParserRuleCall_4_1_1_0; }
		
		//// Parameter list
		//   ')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_7() { return cReturnTypeAssignment_7; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_7_0() { return cReturnTypeTypeParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDefaultValueAssignment_5_1.eContents().get(0);
		
		// // Return type
		//PropertyDefinition:
		//    annotations+=Annotation*
		//    visibility=VisibilityModifier? // Optional visibility
		//    name=ID ':' type=Type ('=' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//visibility=VisibilityModifier? // Optional visibility
		//name=ID ':' type=Type ('=' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_1_0() { return cVisibilityVisibilityModifierParserRuleCall_1_0; }
		
		//// Optional visibility
		//   name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//('=' defaultValue=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_5_1() { return cDefaultValueAssignment_5_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_5_1_0() { return cDefaultValueSTRINGTerminalRuleCall_5_1_0; }
	}
	public class ParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.ParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		// // Property type
		//ParameterDefinition:
		//    name=ID ':' type=Type ('=' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type ('=' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('=' defaultValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgumentsAnnotationArgumentParserRuleCall_2_1_0_0 = (RuleCall)cArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgumentsAnnotationArgumentParserRuleCall_2_1_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		// // Parameter name and type
		//Annotation:
		//    '@' name=ID ('(' (arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID ('(' (arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//arguments+=AnnotationArgument
		public Assignment getArgumentsAssignment_2_1_0() { return cArgumentsAssignment_2_1_0; }
		
		//AnnotationArgument
		public RuleCall getArgumentsAnnotationArgumentParserRuleCall_2_1_0_0() { return cArgumentsAnnotationArgumentParserRuleCall_2_1_0_0; }
		
		//(',' arguments+=AnnotationArgument)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//arguments+=AnnotationArgument
		public Assignment getArgumentsAssignment_2_1_1_1() { return cArgumentsAssignment_2_1_1_1; }
		
		//AnnotationArgument
		public RuleCall getArgumentsAnnotationArgumentParserRuleCall_2_1_1_1_0() { return cArgumentsAnnotationArgumentParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class AnnotationArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.AnnotationArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueBooleanLiteralParserRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		private final RuleCall cValueQualifiedNameParserRuleCall_2_0_2 = (RuleCall)cValueAlternatives_2_0.eContents().get(2);
		
		//AnnotationArgument:
		//    name=ID '=' value=(STRING | BooleanLiteral | QualifiedName);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=(STRING | BooleanLiteral | QualifiedName)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=(STRING | BooleanLiteral | QualifiedName)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(STRING | BooleanLiteral | QualifiedName)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }
		
		//BooleanLiteral
		public RuleCall getValueBooleanLiteralParserRuleCall_2_0_1() { return cValueBooleanLiteralParserRuleCall_2_0_1; }
		
		//QualifiedName
		public RuleCall getValueQualifiedNameParserRuleCall_2_0_2() { return cValueQualifiedNameParserRuleCall_2_0_2; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class VisibilityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.VisibilityModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VisibilityModifier:
		//    'public' | 'private' | 'protected';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' | 'private' | 'protected'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'private'
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }
		
		//'protected'
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGenericTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		// // Direct keywords
		//Type:
		//    PrimitiveType | QualifiedName | GenericType;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | QualifiedName | GenericType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//GenericType
		public RuleCall getGenericTypeParserRuleCall_2() { return cGenericTypeParserRuleCall_2; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUUIDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDateKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTimestampKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cListKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOptionalKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		// // Types can be primitive or qualified names
		//PrimitiveType:
		//    'void' | 'String' | 'double' | 'float' | 'int' | 'UUID' | 'Date' | 'Timestamp' | 'List' | 'Optional';
		@Override public ParserRule getRule() { return rule; }
		
		//'void' | 'String' | 'double' | 'float' | 'int' | 'UUID' | 'Date' | 'Timestamp' | 'List' | 'Optional'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'void'
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'double'
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }
		
		//'float'
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }
		
		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }
		
		//'UUID'
		public Keyword getUUIDKeyword_5() { return cUUIDKeyword_5; }
		
		//'Date'
		public Keyword getDateKeyword_6() { return cDateKeyword_6; }
		
		//'Timestamp'
		public Keyword getTimestampKeyword_7() { return cTimestampKeyword_7; }
		
		//'List'
		public Keyword getListKeyword_8() { return cListKeyword_8; }
		
		//'Optional'
		public Keyword getOptionalKeyword_9() { return cOptionalKeyword_9; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class GenericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.GenericType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrimitiveTypeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		// // Fully qualified names (e.g., com.example)
		//GenericType:
		//    (QualifiedName | PrimitiveType) '<' Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//(QualifiedName | PrimitiveType) '<' Type '>'
		public Group getGroup() { return cGroup; }
		
		//(QualifiedName | PrimitiveType)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0_0() { return cQualifiedNameParserRuleCall_0_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0_1() { return cPrimitiveTypeParserRuleCall_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.EntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityTypeParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyTypeParserRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntityType:
		//    '<' entity=Type ',' key=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' entity=Type ',' key=Type '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//entity=Type
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//Type
		public RuleCall getEntityTypeParserRuleCall_1_0() { return cEntityTypeParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//key=Type
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//Type
		public RuleCall getKeyTypeParserRuleCall_3_0() { return cKeyTypeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class PomXmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.PomXml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPomXmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGroupIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroupIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroupIdSTRINGTerminalRuleCall_4_0 = (RuleCall)cGroupIdAssignment_4.eContents().get(0);
		private final Keyword cArtifactIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArtifactIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArtifactIdSTRINGTerminalRuleCall_7_0 = (RuleCall)cArtifactIdAssignment_7.eContents().get(0);
		private final Keyword cVersionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cVersionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cVersionSTRINGTerminalRuleCall_10_0 = (RuleCall)cVersionAssignment_10.eContents().get(0);
		private final Keyword cPackagingKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cPackagingAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cPackagingSTRINGTerminalRuleCall_13_0 = (RuleCall)cPackagingAssignment_13.eContents().get(0);
		private final Assignment cPropertiesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cPropertiesPropertiesParserRuleCall_14_0 = (RuleCall)cPropertiesAssignment_14.eContents().get(0);
		private final Assignment cDependenciesAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cDependenciesDependenciesParserRuleCall_15_0 = (RuleCall)cDependenciesAssignment_15.eContents().get(0);
		private final Assignment cBuildAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cBuildBuildParserRuleCall_16_0 = (RuleCall)cBuildAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//PomXml:
		//    'pomXml' '{'
		//        'groupId' '=' groupId=STRING
		//        'artifactId' '=' artifactId=STRING
		//        'version' '=' version=STRING
		//        'packaging' '=' packaging=STRING
		//        properties=Properties
		//        dependencies=Dependencies
		//        build=Build
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'pomXml' '{'
		//    'groupId' '=' groupId=STRING
		//    'artifactId' '=' artifactId=STRING
		//    'version' '=' version=STRING
		//    'packaging' '=' packaging=STRING
		//    properties=Properties
		//    dependencies=Dependencies
		//    build=Build
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'pomXml'
		public Keyword getPomXmlKeyword_0() { return cPomXmlKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'groupId'
		public Keyword getGroupIdKeyword_2() { return cGroupIdKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//groupId=STRING
		public Assignment getGroupIdAssignment_4() { return cGroupIdAssignment_4; }
		
		//STRING
		public RuleCall getGroupIdSTRINGTerminalRuleCall_4_0() { return cGroupIdSTRINGTerminalRuleCall_4_0; }
		
		//'artifactId'
		public Keyword getArtifactIdKeyword_5() { return cArtifactIdKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//artifactId=STRING
		public Assignment getArtifactIdAssignment_7() { return cArtifactIdAssignment_7; }
		
		//STRING
		public RuleCall getArtifactIdSTRINGTerminalRuleCall_7_0() { return cArtifactIdSTRINGTerminalRuleCall_7_0; }
		
		//'version'
		public Keyword getVersionKeyword_8() { return cVersionKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//version=STRING
		public Assignment getVersionAssignment_10() { return cVersionAssignment_10; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_10_0() { return cVersionSTRINGTerminalRuleCall_10_0; }
		
		//'packaging'
		public Keyword getPackagingKeyword_11() { return cPackagingKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//packaging=STRING
		public Assignment getPackagingAssignment_13() { return cPackagingAssignment_13; }
		
		//STRING
		public RuleCall getPackagingSTRINGTerminalRuleCall_13_0() { return cPackagingSTRINGTerminalRuleCall_13_0; }
		
		//properties=Properties
		public Assignment getPropertiesAssignment_14() { return cPropertiesAssignment_14; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_14_0() { return cPropertiesPropertiesParserRuleCall_14_0; }
		
		//dependencies=Dependencies
		public Assignment getDependenciesAssignment_15() { return cDependenciesAssignment_15; }
		
		//Dependencies
		public RuleCall getDependenciesDependenciesParserRuleCall_15_0() { return cDependenciesDependenciesParserRuleCall_15_0; }
		
		//build=Build
		public Assignment getBuildAssignment_16() { return cBuildAssignment_16; }
		
		//Build
		public RuleCall getBuildBuildParserRuleCall_16_0() { return cBuildBuildParserRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJavaVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJavaVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJavaVersionSTRINGTerminalRuleCall_4_0 = (RuleCall)cJavaVersionAssignment_4.eContents().get(0);
		private final Keyword cSpringBootVersionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpringBootVersionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpringBootVersionSTRINGTerminalRuleCall_7_0 = (RuleCall)cSpringBootVersionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Properties:
		//    'properties' '{'
		//        'javaVersion' '=' javaVersion=STRING
		//        'springBootVersion' '=' springBootVersion=STRING
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'properties' '{'
		//    'javaVersion' '=' javaVersion=STRING
		//    'springBootVersion' '=' springBootVersion=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'properties'
		public Keyword getPropertiesKeyword_0() { return cPropertiesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'javaVersion'
		public Keyword getJavaVersionKeyword_2() { return cJavaVersionKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//javaVersion=STRING
		public Assignment getJavaVersionAssignment_4() { return cJavaVersionAssignment_4; }
		
		//STRING
		public RuleCall getJavaVersionSTRINGTerminalRuleCall_4_0() { return cJavaVersionSTRINGTerminalRuleCall_4_0; }
		
		//'springBootVersion'
		public Keyword getSpringBootVersionKeyword_5() { return cSpringBootVersionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//springBootVersion=STRING
		public Assignment getSpringBootVersionAssignment_7() { return cSpringBootVersionAssignment_7; }
		
		//STRING
		public RuleCall getSpringBootVersionSTRINGTerminalRuleCall_7_0() { return cSpringBootVersionSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Dependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependenciesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDependenciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependenciesDependencyParserRuleCall_3_0 = (RuleCall)cDependenciesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Dependencies:
		//    {Dependencies} 'dependencies' '{'
		//        dependencies+=Dependency*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Dependencies} 'dependencies' '{'
		//    dependencies+=Dependency*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Dependencies}
		public Action getDependenciesAction_0() { return cDependenciesAction_0; }
		
		//'dependencies'
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_3() { return cDependenciesAssignment_3; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_3_0() { return cDependenciesDependencyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGroupIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroupIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroupIdSTRINGTerminalRuleCall_4_0 = (RuleCall)cGroupIdAssignment_4.eContents().get(0);
		private final Keyword cArtifactIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArtifactIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArtifactIdSTRINGTerminalRuleCall_7_0 = (RuleCall)cArtifactIdAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVersionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cVersionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cVersionSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cVersionAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cScopeKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cScopeAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cScopeSTRINGTerminalRuleCall_9_2_0 = (RuleCall)cScopeAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Dependency:
		//    'dependency' '{'
		//        'groupId' '=' groupId=STRING
		//        'artifactId' '=' artifactId=STRING
		//        ('version' '=' version=STRING)?
		//        ('scope' '=' scope=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dependency' '{'
		//    'groupId' '=' groupId=STRING
		//    'artifactId' '=' artifactId=STRING
		//    ('version' '=' version=STRING)?
		//    ('scope' '=' scope=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dependency'
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'groupId'
		public Keyword getGroupIdKeyword_2() { return cGroupIdKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//groupId=STRING
		public Assignment getGroupIdAssignment_4() { return cGroupIdAssignment_4; }
		
		//STRING
		public RuleCall getGroupIdSTRINGTerminalRuleCall_4_0() { return cGroupIdSTRINGTerminalRuleCall_4_0; }
		
		//'artifactId'
		public Keyword getArtifactIdKeyword_5() { return cArtifactIdKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//artifactId=STRING
		public Assignment getArtifactIdAssignment_7() { return cArtifactIdAssignment_7; }
		
		//STRING
		public RuleCall getArtifactIdSTRINGTerminalRuleCall_7_0() { return cArtifactIdSTRINGTerminalRuleCall_7_0; }
		
		//('version' '=' version=STRING)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'version'
		public Keyword getVersionKeyword_8_0() { return cVersionKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//version=STRING
		public Assignment getVersionAssignment_8_2() { return cVersionAssignment_8_2; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_8_2_0() { return cVersionSTRINGTerminalRuleCall_8_2_0; }
		
		//('scope' '=' scope=STRING)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'scope'
		public Keyword getScopeKeyword_9_0() { return cScopeKeyword_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_9_1() { return cEqualsSignKeyword_9_1; }
		
		//scope=STRING
		public Assignment getScopeAssignment_9_2() { return cScopeAssignment_9_2; }
		
		//STRING
		public RuleCall getScopeSTRINGTerminalRuleCall_9_2_0() { return cScopeSTRINGTerminalRuleCall_9_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class BuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Build");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBuildKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPluginsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPluginsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPluginsPluginParserRuleCall_5_0 = (RuleCall)cPluginsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Build:
		//    {Build} 'build' '{'
		//        'plugins' '{'
		//            plugins+=Plugin*
		//        '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Build} 'build' '{'
		//    'plugins' '{'
		//        plugins+=Plugin*
		//    '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Build}
		public Action getBuildAction_0() { return cBuildAction_0; }
		
		//'build'
		public Keyword getBuildKeyword_1() { return cBuildKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'plugins'
		public Keyword getPluginsKeyword_3() { return cPluginsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//plugins+=Plugin*
		public Assignment getPluginsAssignment_5() { return cPluginsAssignment_5; }
		
		//Plugin
		public RuleCall getPluginsPluginParserRuleCall_5_0() { return cPluginsPluginParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Plugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPluginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGroupIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroupIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroupIdSTRINGTerminalRuleCall_4_0 = (RuleCall)cGroupIdAssignment_4.eContents().get(0);
		private final Keyword cArtifactIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArtifactIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArtifactIdSTRINGTerminalRuleCall_7_0 = (RuleCall)cArtifactIdAssignment_7.eContents().get(0);
		private final Keyword cVersionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cVersionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cVersionSTRINGTerminalRuleCall_10_0 = (RuleCall)cVersionAssignment_10.eContents().get(0);
		private final Assignment cConfigurationAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConfigurationConfigurationParserRuleCall_11_0 = (RuleCall)cConfigurationAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Plugin:
		//    'plugin' '{'
		//        'groupId' '=' groupId=STRING
		//        'artifactId' '=' artifactId=STRING
		//        'version' '=' version=STRING
		//        configuration=Configuration
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'plugin' '{'
		//    'groupId' '=' groupId=STRING
		//    'artifactId' '=' artifactId=STRING
		//    'version' '=' version=STRING
		//    configuration=Configuration
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'plugin'
		public Keyword getPluginKeyword_0() { return cPluginKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'groupId'
		public Keyword getGroupIdKeyword_2() { return cGroupIdKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//groupId=STRING
		public Assignment getGroupIdAssignment_4() { return cGroupIdAssignment_4; }
		
		//STRING
		public RuleCall getGroupIdSTRINGTerminalRuleCall_4_0() { return cGroupIdSTRINGTerminalRuleCall_4_0; }
		
		//'artifactId'
		public Keyword getArtifactIdKeyword_5() { return cArtifactIdKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//artifactId=STRING
		public Assignment getArtifactIdAssignment_7() { return cArtifactIdAssignment_7; }
		
		//STRING
		public RuleCall getArtifactIdSTRINGTerminalRuleCall_7_0() { return cArtifactIdSTRINGTerminalRuleCall_7_0; }
		
		//'version'
		public Keyword getVersionKeyword_8() { return cVersionKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//version=STRING
		public Assignment getVersionAssignment_10() { return cVersionAssignment_10; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_10_0() { return cVersionSTRINGTerminalRuleCall_10_0; }
		
		//configuration=Configuration
		public Assignment getConfigurationAssignment_11() { return cConfigurationAssignment_11; }
		
		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_11_0() { return cConfigurationConfigurationParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "springboot.automate.GrabDsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceSTRINGTerminalRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetSTRINGTerminalRuleCall_7_0 = (RuleCall)cTargetAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Configuration:
		//    'configuration' '{'
		//            'source' '=' source=STRING
		//            'target' '=' target=STRING
		//        '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'configuration' '{'
		//        'source' '=' source=STRING
		//        'target' '=' target=STRING
		//    '}'
		public Group getGroup() { return cGroup; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'source'
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//source=STRING
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//STRING
		public RuleCall getSourceSTRINGTerminalRuleCall_4_0() { return cSourceSTRINGTerminalRuleCall_4_0; }
		
		//'target'
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//target=STRING
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_7_0() { return cTargetSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private final ModelElements pModel;
	private final PackageDefinitionElements pPackageDefinition;
	private final ClassDefinitionElements pClassDefinition;
	private final InterfaceDefinitionElements pInterfaceDefinition;
	private final MemberDefinitionElements pMemberDefinition;
	private final MethodDefinitionElements pMethodDefinition;
	private final PropertyDefinitionElements pPropertyDefinition;
	private final ParameterDefinitionElements pParameterDefinition;
	private final AnnotationElements pAnnotation;
	private final AnnotationArgumentElements pAnnotationArgument;
	private final BooleanLiteralElements pBooleanLiteral;
	private final VisibilityModifierElements pVisibilityModifier;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final QualifiedNameElements pQualifiedName;
	private final GenericTypeElements pGenericType;
	private final EntityTypeElements pEntityType;
	private final PomXmlElements pPomXml;
	private final PropertiesElements pProperties;
	private final DependenciesElements pDependencies;
	private final DependencyElements pDependency;
	private final BuildElements pBuild;
	private final PluginElements pPlugin;
	private final ConfigurationElements pConfiguration;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GrabDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pClassDefinition = new ClassDefinitionElements();
		this.pInterfaceDefinition = new InterfaceDefinitionElements();
		this.pMemberDefinition = new MemberDefinitionElements();
		this.pMethodDefinition = new MethodDefinitionElements();
		this.pPropertyDefinition = new PropertyDefinitionElements();
		this.pParameterDefinition = new ParameterDefinitionElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationArgument = new AnnotationArgumentElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pVisibilityModifier = new VisibilityModifierElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pGenericType = new GenericTypeElements();
		this.pEntityType = new EntityTypeElements();
		this.pPomXml = new PomXmlElements();
		this.pProperties = new PropertiesElements();
		this.pDependencies = new DependenciesElements();
		this.pDependency = new DependencyElements();
		this.pBuild = new BuildElements();
		this.pPlugin = new PluginElements();
		this.pConfiguration = new ConfigurationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("springboot.automate.GrabDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Entry point for the grammar
	//Model:
	//    'package' packageName=QualifiedName '{'
	//        pomXml=PomXml
	//        packages+=PackageDefinition*
	//    '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PackageDefinition:
	//    annotations+=Annotation*
	//    'package' packageName=QualifiedName '{'
	//        classes+=ClassDefinition*
	//        interfaces+=InterfaceDefinition*
	//    '}';
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}
	
	//ClassDefinition:
	//    annotations+=Annotation*
	//    'class' name=ID
	//    ('implements' interface=QualifiedName)? // Implementing an interface
	//    '{'
	//        members+=MemberDefinition*
	//    '}';
	public ClassDefinitionElements getClassDefinitionAccess() {
		return pClassDefinition;
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}
	
	//InterfaceDefinition:
	//    annotations+=Annotation*
	//    'interface' name=ID
	//    ('extends' interface=EntityType)? // Implementing an interface
	//    '{'
	//        members+=MemberDefinition*
	//    '}';
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return pInterfaceDefinition;
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}
	
	//MemberDefinition:
	//    (method=MethodDefinition | property=PropertyDefinition);
	public MemberDefinitionElements getMemberDefinitionAccess() {
		return pMemberDefinition;
	}
	
	public ParserRule getMemberDefinitionRule() {
		return getMemberDefinitionAccess().getRule();
	}
	
	//MethodDefinition:
	//    annotations+=Annotation*
	//    visibility=VisibilityModifier? // Optional visibility
	//    name=ID '('
	//        (parameters+=ParameterDefinition (',' parameters+=ParameterDefinition)*)? // Parameter list
	//    ')'
	//    ':' returnType=Type ';';
	public MethodDefinitionElements getMethodDefinitionAccess() {
		return pMethodDefinition;
	}
	
	public ParserRule getMethodDefinitionRule() {
		return getMethodDefinitionAccess().getRule();
	}
	
	// // Return type
	//PropertyDefinition:
	//    annotations+=Annotation*
	//    visibility=VisibilityModifier? // Optional visibility
	//    name=ID ':' type=Type ('=' defaultValue=STRING)?;
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return pPropertyDefinition;
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}
	
	// // Property type
	//ParameterDefinition:
	//    name=ID ':' type=Type ('=' defaultValue=STRING)?;
	public ParameterDefinitionElements getParameterDefinitionAccess() {
		return pParameterDefinition;
	}
	
	public ParserRule getParameterDefinitionRule() {
		return getParameterDefinitionAccess().getRule();
	}
	
	// // Parameter name and type
	//Annotation:
	//    '@' name=ID ('(' (arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationArgument:
	//    name=ID '=' value=(STRING | BooleanLiteral | QualifiedName);
	public AnnotationArgumentElements getAnnotationArgumentAccess() {
		return pAnnotationArgument;
	}
	
	public ParserRule getAnnotationArgumentRule() {
		return getAnnotationArgumentAccess().getRule();
	}
	
	//BooleanLiteral:
	//    'true' | 'false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//VisibilityModifier:
	//    'public' | 'private' | 'protected';
	public VisibilityModifierElements getVisibilityModifierAccess() {
		return pVisibilityModifier;
	}
	
	public ParserRule getVisibilityModifierRule() {
		return getVisibilityModifierAccess().getRule();
	}
	
	// // Direct keywords
	//Type:
	//    PrimitiveType | QualifiedName | GenericType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	// // Types can be primitive or qualified names
	//PrimitiveType:
	//    'void' | 'String' | 'double' | 'float' | 'int' | 'UUID' | 'Date' | 'Timestamp' | 'List' | 'Optional';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	// // Fully qualified names (e.g., com.example)
	//GenericType:
	//    (QualifiedName | PrimitiveType) '<' Type '>';
	public GenericTypeElements getGenericTypeAccess() {
		return pGenericType;
	}
	
	public ParserRule getGenericTypeRule() {
		return getGenericTypeAccess().getRule();
	}
	
	//EntityType:
	//    '<' entity=Type ',' key=Type '>';
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}
	
	//PomXml:
	//    'pomXml' '{'
	//        'groupId' '=' groupId=STRING
	//        'artifactId' '=' artifactId=STRING
	//        'version' '=' version=STRING
	//        'packaging' '=' packaging=STRING
	//        properties=Properties
	//        dependencies=Dependencies
	//        build=Build
	//    '}';
	public PomXmlElements getPomXmlAccess() {
		return pPomXml;
	}
	
	public ParserRule getPomXmlRule() {
		return getPomXmlAccess().getRule();
	}
	
	//Properties:
	//    'properties' '{'
	//        'javaVersion' '=' javaVersion=STRING
	//        'springBootVersion' '=' springBootVersion=STRING
	//    '}';
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//Dependencies:
	//    {Dependencies} 'dependencies' '{'
	//        dependencies+=Dependency*
	//    '}';
	public DependenciesElements getDependenciesAccess() {
		return pDependencies;
	}
	
	public ParserRule getDependenciesRule() {
		return getDependenciesAccess().getRule();
	}
	
	//Dependency:
	//    'dependency' '{'
	//        'groupId' '=' groupId=STRING
	//        'artifactId' '=' artifactId=STRING
	//        ('version' '=' version=STRING)?
	//        ('scope' '=' scope=STRING)?
	//    '}';
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//Build:
	//    {Build} 'build' '{'
	//        'plugins' '{'
	//            plugins+=Plugin*
	//        '}'
	//    '}';
	public BuildElements getBuildAccess() {
		return pBuild;
	}
	
	public ParserRule getBuildRule() {
		return getBuildAccess().getRule();
	}
	
	//Plugin:
	//    'plugin' '{'
	//        'groupId' '=' groupId=STRING
	//        'artifactId' '=' artifactId=STRING
	//        'version' '=' version=STRING
	//        configuration=Configuration
	//    '}';
	public PluginElements getPluginAccess() {
		return pPlugin;
	}
	
	public ParserRule getPluginRule() {
		return getPluginAccess().getRule();
	}
	
	//Configuration:
	//    'configuration' '{'
	//            'source' '=' source=STRING
	//            'target' '=' target=STRING
	//        '}'
	//;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
