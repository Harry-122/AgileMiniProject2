/*
 * generated by Xtext 2.32.0
 */
package springboot.automate.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import springboot.automate.grabDsl.Annotation;
import springboot.automate.grabDsl.AnnotationArgument;
import springboot.automate.grabDsl.ClassDefinition;
import springboot.automate.grabDsl.GrabDslPackage;
import springboot.automate.grabDsl.InterfaceDefinition;
import springboot.automate.grabDsl.MemberDefinition;
import springboot.automate.grabDsl.MethodDefinition;
import springboot.automate.grabDsl.Model;
import springboot.automate.grabDsl.PackageDefinition;
import springboot.automate.grabDsl.ParameterDefinition;
import springboot.automate.grabDsl.PropertyDefinition;
import springboot.automate.services.GrabDslGrammarAccess;

@SuppressWarnings("all")
public class GrabDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GrabDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GrabDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GrabDslPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case GrabDslPackage.ANNOTATION_ARGUMENT:
				sequence_AnnotationArgument(context, (AnnotationArgument) semanticObject); 
				return; 
			case GrabDslPackage.CLASS_DEFINITION:
				sequence_ClassDefinition(context, (ClassDefinition) semanticObject); 
				return; 
			case GrabDslPackage.INTERFACE_DEFINITION:
				sequence_InterfaceDefinition(context, (InterfaceDefinition) semanticObject); 
				return; 
			case GrabDslPackage.MEMBER_DEFINITION:
				sequence_MemberDefinition(context, (MemberDefinition) semanticObject); 
				return; 
			case GrabDslPackage.METHOD_DEFINITION:
				sequence_MethodDefinition(context, (MethodDefinition) semanticObject); 
				return; 
			case GrabDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GrabDslPackage.PACKAGE_DEFINITION:
				sequence_PackageDefinition(context, (PackageDefinition) semanticObject); 
				return; 
			case GrabDslPackage.PARAMETER_DEFINITION:
				sequence_ParameterDefinition(context, (ParameterDefinition) semanticObject); 
				return; 
			case GrabDslPackage.PROPERTY_DEFINITION:
				sequence_PropertyDefinition(context, (PropertyDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AnnotationArgument returns AnnotationArgument
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 * </pre>
	 */
	protected void sequence_AnnotationArgument(ISerializationContext context, AnnotationArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.ANNOTATION_ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.ANNOTATION_ARGUMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.ANNOTATION_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.ANNOTATION_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationArgumentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAnnotationArgumentAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ID (arguments+=AnnotationArgument arguments+=AnnotationArgument*)?)
	 * </pre>
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDefinition returns ClassDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* name=ID interface=QualifiedName? members+=MemberDefinition*)
	 * </pre>
	 */
	protected void sequence_ClassDefinition(ISerializationContext context, ClassDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InterfaceDefinition returns InterfaceDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* name=ID members+=MemberDefinition*)
	 * </pre>
	 */
	protected void sequence_InterfaceDefinition(ISerializationContext context, InterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MemberDefinition returns MemberDefinition
	 *
	 * Constraint:
	 *     (method=MethodDefinition | property=PropertyDefinition)
	 * </pre>
	 */
	protected void sequence_MemberDefinition(ISerializationContext context, MemberDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MethodDefinition returns MethodDefinition
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         visibility=VisibilityModifier? 
	 *         name=ID 
	 *         (parameters+=ParameterDefinition parameters+=ParameterDefinition*)? 
	 *         returnType=Type
	 *     )
	 * </pre>
	 */
	protected void sequence_MethodDefinition(ISerializationContext context, MethodDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (packageName=QualifiedName packages+=PackageDefinition*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageDefinition returns PackageDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* packageName=QualifiedName classes+=ClassDefinition* interfaces+=InterfaceDefinition*)
	 * </pre>
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, PackageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterDefinition returns ParameterDefinition
	 *
	 * Constraint:
	 *     (name=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_ParameterDefinition(ISerializationContext context, ParameterDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyDefinition returns PropertyDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* visibility=VisibilityModifier? name=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_PropertyDefinition(ISerializationContext context, PropertyDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
