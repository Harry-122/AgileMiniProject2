/*
 * generated by Xtext 2.32.0
 */
package springboot.automate.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import springboot.automate.grabDsl.Annotation;
import springboot.automate.grabDsl.AnnotationArgument;
import springboot.automate.grabDsl.Build;
import springboot.automate.grabDsl.ClassDefinition;
import springboot.automate.grabDsl.Configuration;
import springboot.automate.grabDsl.Dependencies;
import springboot.automate.grabDsl.Dependency;
import springboot.automate.grabDsl.EntityType;
import springboot.automate.grabDsl.GrabDslPackage;
import springboot.automate.grabDsl.InterfaceDefinition;
import springboot.automate.grabDsl.MemberDefinition;
import springboot.automate.grabDsl.MethodDefinition;
import springboot.automate.grabDsl.Model;
import springboot.automate.grabDsl.PackageDefinition;
import springboot.automate.grabDsl.ParameterDefinition;
import springboot.automate.grabDsl.Plugin;
import springboot.automate.grabDsl.PomXml;
import springboot.automate.grabDsl.Properties;
import springboot.automate.grabDsl.PropertyDefinition;
import springboot.automate.services.GrabDslGrammarAccess;

@SuppressWarnings("all")
public class GrabDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GrabDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GrabDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GrabDslPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case GrabDslPackage.ANNOTATION_ARGUMENT:
				sequence_AnnotationArgument(context, (AnnotationArgument) semanticObject); 
				return; 
			case GrabDslPackage.BUILD:
				sequence_Build(context, (Build) semanticObject); 
				return; 
			case GrabDslPackage.CLASS_DEFINITION:
				sequence_ClassDefinition(context, (ClassDefinition) semanticObject); 
				return; 
			case GrabDslPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case GrabDslPackage.DEPENDENCIES:
				sequence_Dependencies(context, (Dependencies) semanticObject); 
				return; 
			case GrabDslPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case GrabDslPackage.ENTITY_TYPE:
				sequence_EntityType(context, (EntityType) semanticObject); 
				return; 
			case GrabDslPackage.INTERFACE_DEFINITION:
				sequence_InterfaceDefinition(context, (InterfaceDefinition) semanticObject); 
				return; 
			case GrabDslPackage.MEMBER_DEFINITION:
				sequence_MemberDefinition(context, (MemberDefinition) semanticObject); 
				return; 
			case GrabDslPackage.METHOD_DEFINITION:
				sequence_MethodDefinition(context, (MethodDefinition) semanticObject); 
				return; 
			case GrabDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GrabDslPackage.PACKAGE_DEFINITION:
				sequence_PackageDefinition(context, (PackageDefinition) semanticObject); 
				return; 
			case GrabDslPackage.PARAMETER_DEFINITION:
				sequence_ParameterDefinition(context, (ParameterDefinition) semanticObject); 
				return; 
			case GrabDslPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case GrabDslPackage.POM_XML:
				sequence_PomXml(context, (PomXml) semanticObject); 
				return; 
			case GrabDslPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case GrabDslPackage.PROPERTY_DEFINITION:
				sequence_PropertyDefinition(context, (PropertyDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AnnotationArgument returns AnnotationArgument
	 *
	 * Constraint:
	 *     (name=ID (value=STRING | value=BooleanLiteral | value=QualifiedName))
	 * </pre>
	 */
	protected void sequence_AnnotationArgument(ISerializationContext context, AnnotationArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ID (arguments+=AnnotationArgument arguments+=AnnotationArgument*)?)
	 * </pre>
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Build returns Build
	 *
	 * Constraint:
	 *     plugins+=Plugin*
	 * </pre>
	 */
	protected void sequence_Build(ISerializationContext context, Build semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDefinition returns ClassDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* name=ID interface=QualifiedName? members+=MemberDefinition*)
	 * </pre>
	 */
	protected void sequence_ClassDefinition(ISerializationContext context, ClassDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (source=STRING target=STRING)
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.CONFIGURATION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.CONFIGURATION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.CONFIGURATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.CONFIGURATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getConfigurationAccess().getTargetSTRINGTerminalRuleCall_7_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dependencies returns Dependencies
	 *
	 * Constraint:
	 *     dependencies+=Dependency*
	 * </pre>
	 */
	protected void sequence_Dependencies(ISerializationContext context, Dependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (groupId=STRING artifactId=STRING version=STRING? scope=STRING?)
	 * </pre>
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntityType returns EntityType
	 *
	 * Constraint:
	 *     (entity=Type key=Type)
	 * </pre>
	 */
	protected void sequence_EntityType(ISerializationContext context, EntityType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.ENTITY_TYPE__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.ENTITY_TYPE__ENTITY));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.ENTITY_TYPE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.ENTITY_TYPE__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityTypeAccess().getEntityTypeParserRuleCall_1_0(), semanticObject.getEntity());
		feeder.accept(grammarAccess.getEntityTypeAccess().getKeyTypeParserRuleCall_3_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InterfaceDefinition returns InterfaceDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* name=ID interface=EntityType? members+=MemberDefinition*)
	 * </pre>
	 */
	protected void sequence_InterfaceDefinition(ISerializationContext context, InterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MemberDefinition returns MemberDefinition
	 *
	 * Constraint:
	 *     (method=MethodDefinition | property=PropertyDefinition)
	 * </pre>
	 */
	protected void sequence_MemberDefinition(ISerializationContext context, MemberDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MethodDefinition returns MethodDefinition
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         visibility=VisibilityModifier? 
	 *         name=ID 
	 *         (parameters+=ParameterDefinition parameters+=ParameterDefinition*)? 
	 *         returnType=Type
	 *     )
	 * </pre>
	 */
	protected void sequence_MethodDefinition(ISerializationContext context, MethodDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (packageName=QualifiedName pomXml=PomXml packages+=PackageDefinition*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageDefinition returns PackageDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* packageName=QualifiedName classes+=ClassDefinition* interfaces+=InterfaceDefinition*)
	 * </pre>
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, PackageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterDefinition returns ParameterDefinition
	 *
	 * Constraint:
	 *     (name=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_ParameterDefinition(ISerializationContext context, ParameterDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Plugin returns Plugin
	 *
	 * Constraint:
	 *     (groupId=STRING artifactId=STRING version=STRING configuration=Configuration)
	 * </pre>
	 */
	protected void sequence_Plugin(ISerializationContext context, Plugin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PLUGIN__GROUP_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PLUGIN__GROUP_ID));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PLUGIN__ARTIFACT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PLUGIN__ARTIFACT_ID));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PLUGIN__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PLUGIN__VERSION));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PLUGIN__CONFIGURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PLUGIN__CONFIGURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPluginAccess().getGroupIdSTRINGTerminalRuleCall_4_0(), semanticObject.getGroupId());
		feeder.accept(grammarAccess.getPluginAccess().getArtifactIdSTRINGTerminalRuleCall_7_0(), semanticObject.getArtifactId());
		feeder.accept(grammarAccess.getPluginAccess().getVersionSTRINGTerminalRuleCall_10_0(), semanticObject.getVersion());
		feeder.accept(grammarAccess.getPluginAccess().getConfigurationConfigurationParserRuleCall_11_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PomXml returns PomXml
	 *
	 * Constraint:
	 *     (
	 *         groupId=STRING 
	 *         artifactId=STRING 
	 *         version=STRING 
	 *         packaging=STRING 
	 *         properties=Properties 
	 *         dependencies=Dependencies 
	 *         build=Build
	 *     )
	 * </pre>
	 */
	protected void sequence_PomXml(ISerializationContext context, PomXml semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__GROUP_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__GROUP_ID));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__ARTIFACT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__ARTIFACT_ID));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__VERSION));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__PACKAGING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__PACKAGING));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__PROPERTIES));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__DEPENDENCIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__DEPENDENCIES));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.POM_XML__BUILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.POM_XML__BUILD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPomXmlAccess().getGroupIdSTRINGTerminalRuleCall_4_0(), semanticObject.getGroupId());
		feeder.accept(grammarAccess.getPomXmlAccess().getArtifactIdSTRINGTerminalRuleCall_7_0(), semanticObject.getArtifactId());
		feeder.accept(grammarAccess.getPomXmlAccess().getVersionSTRINGTerminalRuleCall_10_0(), semanticObject.getVersion());
		feeder.accept(grammarAccess.getPomXmlAccess().getPackagingSTRINGTerminalRuleCall_13_0(), semanticObject.getPackaging());
		feeder.accept(grammarAccess.getPomXmlAccess().getPropertiesPropertiesParserRuleCall_14_0(), semanticObject.getProperties());
		feeder.accept(grammarAccess.getPomXmlAccess().getDependenciesDependenciesParserRuleCall_15_0(), semanticObject.getDependencies());
		feeder.accept(grammarAccess.getPomXmlAccess().getBuildBuildParserRuleCall_16_0(), semanticObject.getBuild());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Properties returns Properties
	 *
	 * Constraint:
	 *     (javaVersion=STRING springBootVersion=STRING)
	 * </pre>
	 */
	protected void sequence_Properties(ISerializationContext context, Properties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PROPERTIES__JAVA_VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PROPERTIES__JAVA_VERSION));
			if (transientValues.isValueTransient(semanticObject, GrabDslPackage.Literals.PROPERTIES__SPRING_BOOT_VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GrabDslPackage.Literals.PROPERTIES__SPRING_BOOT_VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertiesAccess().getJavaVersionSTRINGTerminalRuleCall_4_0(), semanticObject.getJavaVersion());
		feeder.accept(grammarAccess.getPropertiesAccess().getSpringBootVersionSTRINGTerminalRuleCall_7_0(), semanticObject.getSpringBootVersion());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyDefinition returns PropertyDefinition
	 *
	 * Constraint:
	 *     (annotations+=Annotation* visibility=VisibilityModifier? name=ID type=Type defaultValue=STRING?)
	 * </pre>
	 */
	protected void sequence_PropertyDefinition(ISerializationContext context, PropertyDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
