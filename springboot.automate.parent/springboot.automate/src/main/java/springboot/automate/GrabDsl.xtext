grammar springboot.automate.GrabDsl with org.eclipse.xtext.common.Terminals

generate grabDsl "http://www.automate.springboot/GrabDsl"

// Entry point for the grammar
Model:
	'package' packageName=QualifiedName '{'
		pomXml=PomXml
		springBootApplication=SpringBootApplication
		packages+=PackageDefinition*
	
	'}';

// Existing package definition remains unchanged
PackageDefinition:
	annotations+=Annotation*
    'package' packageName=QualifiedName '{'
        classes+=ClassDefinition*
        interfaces+=InterfaceDefinition*
    '}';

// Class definitions remain unchanged
ClassDefinition:
    annotations+=Annotation*
    'class' name=ID 
    ('implements' interface=QualifiedName)? // Implementing an interface
    '{'
        members+=MemberDefinition*
    '}';

InterfaceDefinition:
    annotations+=Annotation*
    'interface' name=ID 
    ('extends' interface=EntityType)? // Implementing an interface
    '{'
        members+=MemberDefinition*
    '}';


MemberDefinition:
	(method=MethodDefinition | property=PropertyDefinition);

// Method definition remains unchanged
MethodDefinition:
	annotations+=Annotation*
	visibility=VisibilityModifier? // Optional visibility
	name=ID '('
	(parameters+=ParameterDefinition (',' parameters+=ParameterDefinition)*)? // Parameter list
	')'
	':' returnType=Type ';'; // Return type

// Property definition remains unchanged
PropertyDefinition:
	annotations+=Annotation*
	visibility=VisibilityModifier? // Optional visibility
	name=ID ':' type=Type ('=' defaultValue=STRING)?; // Property type

// Parameter definition remains unchanged
ParameterDefinition:
	name=ID ':' type=Type ('=' defaultValue=STRING)?; // Parameter name and type

// Annotation definition remains unchanged
Annotation:
	'@' name=ID ('(' (arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)*)? ')')?;

AnnotationArgument:
	name=ID '=' value=STRING; // Annotation argument as key-value pairs

// Visibility modifier remains unchanged
VisibilityModifier:
	'public' | 'private' | 'protected'; // Direct keywords

// Types (can be primitive or qualified names) remain unchanged
Type:
	PrimitiveType | QualifiedName | GenericType;

// Primitive types remain unchanged
PrimitiveType:
    'void' | 'String' | 'double' | 'float' | 'int' | 'UUID' | 'Date' | 'Timestamp' | 'List' | 'Optional';

// Qualified names remain unchanged
QualifiedName:
	ID ('.' ID)*; // Fully qualified names (e.g., com.example)

// Generic types remain unchanged
GenericType:
	(QualifiedName | PrimitiveType) '<' Type '>';
    
EntityType:
	'<' entity=Type ',' key=Type '>'
;
	
SpringBootApplication:
    'springBootApplication' '{'
        'name' '=' name=ID
        'packageName' '=' packageName=QualifiedName
        'annotations' '=' '[' annotations+=STRING (',' annotations+=STRING)* ']'
    '}';

// --------------------
// New PomXml definition
// --------------------
PomXml:
    'pomXml' '{'
        'groupId' '=' groupId=STRING
        'artifactId' '=' artifactId=STRING
        'version' '=' version=STRING
        'packaging' '=' packaging=STRING
        properties=Properties
        dependencies=Dependencies
        build=Build
    '}';

Properties:
    'properties' '{'
        'javaVersion' '=' javaVersion=STRING
        'springBootVersion' '=' springBootVersion=STRING
    '}';

Dependencies:
    {Dependencies} 'dependencies' '{'
        dependencies+=Dependency*
    '}';

Dependency:
    'dependency' '{'
        'groupId' '=' groupId=STRING
        'artifactId' '=' artifactId=STRING
        'version' '=' version=STRING
        'scope' '=' scope=STRING
    '}';

Build:
    {Build} 'build' '{'
        'plugins' '{'
            plugins+=Plugin*
        '}'
    '}';

Plugin:
    'plugin' '{'
        'groupId' '=' groupId=STRING
        'artifactId' '=' artifactId=STRING
        'version' '=' version=STRING
        configuration=Configuration
    '}';
    
Configuration:
	'configuration' '{'
            'source' '=' source=STRING
            'target' '=' target=STRING
        '}'
;
    
    
    
